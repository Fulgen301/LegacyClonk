name: Build Binaries

on:
  workflow_call:
    inputs:
      extract-version:
        type: boolean
        description: "Extract version info from C4Version.h"
        required: false
        default: false
    outputs:
      objversion:
        value: ${{ jobs.build-binaries.outputs.objversion }}
      buildversion:
        value: ${{ jobs.build-binaries.outputs.buildversion }}


defaults:
  run:
    shell: bash

jobs:
  build-binaries:
    name: Build Binaries
    outputs:
      objversion: ${{ steps.parse-version-number.outputs.objversion }}
      buildversion: ${{ steps.parse-version-number.outputs.buildversion }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: windows-latest
            arch: x86
            os: Windows
          - runner: windows-latest
            arch: x86
            os: Windows
            debugrec: true
          - runner: windows-latest
            arch: x64
            os: Windows
          - runner: ubuntu-20.04
            arch: x64
            os: Linux
            include-groups: true
          - runner: ubuntu-20.04
            arch: x64
            os: Linux
            debugrec: true
          - runner: macos-13
            arch: x64
            os: Mac
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: "Setup Directories"
        run: mkdir output

      - name: "Configure Platform"
        run: |
          echo "CONFIG_SUFFIX=${{ matrix.os }}-${{ matrix.arch }}" >> $GITHUB_ENV
          autobuild/${{ matrix.os }}.sh

      - name: "Configure Platform Architecture"
        run: |
          autobuild/${{ matrix.os }}-${{ matrix.arch }}.sh
      
      - name: Parse version number
        id: parse-version-number
        if: ${{ matrix.include-groups && inputs.extract-version }}
        run: |
          OBJVERSION=grep -P '#define C4XVER\d' src/C4Version.h | cut -d ' ' -f3 | paste -sd .
          echo "objversion=$OBJVERSION" >> $GITHUB_OUTPUT
          BUILDVERSION=grep -P '#define C4XVERBUILD' src/C4Version.h | cut -d ' ' -f3
          echo "buildversion=$BUILDVERSION" >> $GITHUB_OUTPUT

      - name: "Linux: Setup"
        if: ${{ matrix.os == 'Linux' }}
        run: $CHROOT autobuild/setup_linux.sh

      - name: "Mac: Work around libpng mess"
        if: ${{ matrix.os == 'Mac' }}
        run: sudo rm -r /Library/Frameworks/Mono.framework/Headers

      - name: "Windows: Setup VS Dev Environment"
        if: ${{ matrix.os == 'Windows' }}
        uses: seanmiddleditch/gha-setup-vsdevenv@v4
        with:
          arch: ${{ env.VS_ARCH }}

      - name: "Dependencies"
        run: |
          mkdir deps
          cd deps
          curl -L https://github.com/legacyclonk/deps/releases/download/2024-07-24/lc_deps-$CONFIG_SUFFIX.tar.gz | tar -xz
          ./fix_paths.sh

      - name: Configure
        run: |
          $CHROOT cmake -B build . -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_TESTS=On -DCMAKE_CTEST_ARGUMENTS=--output-on-failure $CMAKE_CONFIGURE_ARGS

      - name: "Enable Debugrec"
        if: ${{ matrix.debugrec }}
        run: |
          cmake -B build -DDEBUGREC=On
          echo "CONFIG_SUFFIX=${{ matrix.os }}-${{ matrix.arch }}-debugrec" >> $GITHUB_ENV

      - name: "Disable PCH"
        if: ${{ matrix.debugrec && matrix.os == 'Linux' }}
        run: |
          cmake -B build -DUSE_PCH=Off

      - name: Build
        run: |
          $CHROOT cmake --build build $CMAKE_BUILD_ARGS

      - name: Test
        run: |
          $CHROOT cmake --build build --target test

      - name: "Windows: Collect binaries"
        if: ${{ matrix.os == 'Windows' }}
        run: |
          cd build
          mv *.{exe,pdb} ../output

      - name: "Linux: Collect binaries"
        if: ${{ matrix.os == 'Linux' }}
        run: |
          cd build
          cp clonk c4group ../output

      - name: "Linux: Create AppImage"
        if: ${{ matrix.os == 'Linux' }}
        run: |
          tools/make_AppImage.sh

      - name: "Mac: Create Bundle"
        if: ${{ matrix.os == 'Mac' }}
        run: |
          cd build
          DESTDIR=inst ninja install
          mv inst/usr/local/c4group inst/usr/local/clonk.app ../output

      - name: "Publish Engine"
        id: publish-engine
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CONFIG_SUFFIX }}
          path: output/clonk*

      - name: "Publish c4group"
        id: publish-c4group
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CONFIG_SUFFIX }}-c4group
          path: output/c4group*

      - name: "Build c4gs"
        if: ${{ matrix.include-groups }}
        run: |
          C4GROUP=$PWD/build/c4group tools/make_Graphics.c4g.sh
          C4GROUP=$PWD/build/c4group tools/make_System.c4g.sh

      - name: "Publish System.c4g"
        if: ${{ matrix.include-groups }}
        uses: actions/upload-artifact@v4
        with:
          name: System.c4g
          path: System.c4g

      - name: "Publish Graphics.c4g"
        if: ${{ matrix.include-groups }}
        uses: actions/upload-artifact@v4
        with:
          name: Graphics.c4g
          path: Graphics.c4g
